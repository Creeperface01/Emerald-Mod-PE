#pragma once

class Block;
struct BlockPos;
class Material;
class BlockEntity;
class Level;
class AABB;
class Dimension;
class BlockSourceListener;
class Brightness;
class LightLayer;
class LevelChunk;
class ChunkPos;
class ChunkSource;
#include "../entity/EntityType.h"
#include "FullBlock.h"

class BlockSource {
public:
	BlockSource(Level&, Dimension&, ChunkSource&, bool, bool);
	virtual ~BlockSource();

	void* getBiome(BlockPos const&);
	void* getDimension();
	void* getBlockEntity(BlockPos const&);
	FullBlock getBlockAndData(BlockPos const&);
	void setBlockAndData(BlockPos const&, FullBlock, int, Entity*);
	Block* getBlock(BlockPos const&);
	bool hasBlock(BlockPos const&);
	Level& getLevel();
	short getBlockID(BlockPos const&);
	Material& getMaterial(BlockPos const&);
	bool hasChunksAt(AABB const&);
	bool isEmptyBlock(BlockPos const&);
	FullBlock getBlockAndData(int, int, int);
	void updateNeighborsAt(BlockPos const&);
	void* getTopRainBlockPos(BlockPos const&);
	Block* getAboveTopSolidBlock(BlockPos const&, bool, bool);
	void* getChunkAt(BlockPos const&);
	void* getChunkSource();
	void removeBlock(int, int, int);
	short getData(BlockPos const&);
	void fetchAABBs(AABB const&, bool);
	void fetchCollisionShapes(BlockSource&, AABB const&, float*, bool, Entity*);
	void* getEntities(EntityType, AABB const&, Entity*);
	void checkBlockPermissions(Entity&, BlockPos const&, bool);
	void checkBlockDestroyPermissions(Entity&, BlockPos const&, bool);
	void* getEntities(Entity*, AABB const&);
	void* getNearestEntityNotOfType(Entity*, Vec3 const&, float, EntityType);
	Block* getBlock(int, int, int);
	short getBlockID(int, int, int);
	short getData(int, int, int);
	void setBlock(int, int, int, BlockID, int);
	bool canSeeSky(BlockPos const&);
	bool canSeeSky(int, int, int);
	Material& getMaterial(int, int, int);
	EntityType getNearestEntityOfType(Entity*, AABB const&, EntityType);
	void setBlock(BlockPos const&, BlockID, int);
	void clip(Vec3 const&, Vec3 const&, bool, bool, int, bool);
	bool isSolidBlockingBlock(BlockPos const&);
	Brightness getBrightness(BlockPos const&);
	bool isEmptyBlock(int, int, int);
	void* getRawBrightness(int, int, int, bool);
	bool isSolidBlockingBlock(int, int, int);
	bool isUnobstructedByEntities(AABB const&, Entity*);
	void* getDimensionId() const;
	void removeBlock(BlockPos const&);
	bool isConsideredSolidBlock(BlockPos const&);
	void* getDimensionConst() const;
	bool hasChunksAt(BlockPos const&, int);
	void containsAnyLiquid(AABB const&);
	bool hasChunksAt(BlockPos const&, BlockPos const&);
	bool hasBorderBlock(BlockPos);
	void containsFireBlock(AABB const&);
	void fireEntityChanged(Entity&);
	void* getChunk(ChunkPos const&);
	bool isInWall(Vec3 const&);
	void containsAnySolidBlocking(AABB const&);
	void setBlockAndData(int, int, int, FullBlock, int);
	bool canSeeSkyFromBelowWater(BlockPos);
	Brightness getBrightness(LightLayer const&, BlockPos const&);
	void* getRawBrightness(BlockPos const&, bool);
	void setBlockAndData(BlockPos const&, BlockID, unsigned char, int, Entity*);
	void* getHeightmapPos(BlockPos const&);
	Block* getAboveTopSolidBlock(int, int, bool, bool);
	bool mayPlace(BlockID, BlockPos const&, signed char, Entity*, bool, Entity*);
	Dimension* getDimension() const;
	Level& getLevel() const;
	void setBlockAndData(int, int, int, BlockID, unsigned char, int);
	bool shouldFireEvents(LevelChunk&) const;
	void blockEvent(BlockPos const&, int, int);
	void* getHeightmap(BlockPos const&);
	void* getHeightmap(int, int);
	void* getTickQueue(BlockPos const&);
	void* getMobsAt(EntityType, BlockPos const&);
	void setBorderBlock(BlockPos const&, bool);
	void fireBlocksDirty(BlockPos const&, BlockPos const&);
	void setBlockAndDataNoUpdate(int, int, int, FullBlock);
	void fireBlockChanged(BlockPos const&, FullBlock, FullBlock, int, Entity*);
	void updateNeighborsAtExceptFromFacing(BlockPos const&, BlockPos const&, int);
	void fireBlockEntityChanged(BlockEntity&);
	void setBlockAndData(BlockPos const&, FullBlock, int, Entity*, std::unique_ptr<BlockEntity, std::default_delete<BlockEntity> >);
	void getBlockEntity(int, int, int);
	void removeBlockEntity(BlockPos const&);
	bool isHumidAt(BlockPos const&);
	void* getGrassColor(BlockPos const&);
	void* tryGetBiome(BlockPos const&);
	void* getPublicSource() const;
	void* getLevelConst() const;
	void setBlockNoUpdate(int, int, int, BlockID);
	unsigned short getExtraData(BlockPos const&);
	void setExtraData(BlockPos const&, unsigned short);
	bool _isWaterAt(BlockPos const&);
	void blockEvent(int, int, int, int, int);
	void* getChunkAt(int, int, int);
	void shouldThaw(BlockPos const&, bool);
	void addListener(BlockSourceListener&);
	void containsAny(BlockPos const&, BlockPos const&);
	Block* getTopBlock(int, int&, int);
	bool hasChunksAt(int, int, int, int);
	void addVoidFloor(AABB const&);
	bool shouldFreeze(BlockPos const&, bool);
	bool _blockChanged(BlockPos const&, FullBlock, FullBlock, int, Entity*);
	void* _getSkyDarken();
	Brightness getBrightness(LightLayer const&, int, int, int);
	Brightness getBrightness(int, int, int);
	void* getLightColor(BlockPos const&, Brightness);
	void setBrightness(LightLayer const&, BlockPos const&, Brightness);
	void setBrightness(LightLayer const&, int, int, int, Brightness);
	void setGrassColor(int, BlockPos const&, int);
	void fireBlockEvent(int, int, int, int, int);
	float getSeenPercent(Vec3 const&, AABB const&);
	void removeListener(BlockSourceListener&);
	void fireAreaChanged(BlockPos const&, BlockPos const&);
	void neighborChanged(BlockPos const&, BlockPos const&);
	void runLightUpdates(LightLayer const&, BlockPos const&, BlockPos const&);
	void _fireColumnDirty(int, int, int, int, int);
	void* getWritableChunk(ChunkPos const&);
	void onChunkDiscarded(LevelChunk&);
	bool isSnowTemperature(BlockPos const&);
	void updateNeighborsAt(BlockPos const&, BlockPos const&);
	void* _getBlockPermissions(BlockPos const&, bool);
	void clearCachedLastChunk();
	void getAllocatedHeightAt(BlockPos const&);
	void fetchBorderBlockAABBs(AABB const&);
	void fireBrightnessChanged(BlockPos const&);
	void addUnloadedChunksAABBs(AABB const&);
	void checkIsTopRainBlockPos(BlockPos const&);
	void fireBlockEntityRemoved(std::unique_ptr<BlockEntity, std::default_delete<BlockEntity> >);
	void* getNearestEntityOfType(Entity*, Vec3 const&, float, EntityType);
	bool isConsideredSolidBlock(int, int, int);
	void updateLightIfOtherThan(LightLayer const&, BlockPos const&, Brightness);
	void findNextSpawnBlockUnder(BlockPos&);
	void fetchBorderBlockCollisions(BlockSource&, AABB const&, Entity*);
	void findNextTopSolidBlockUnder(BlockPos&);
	bool shouldFreezeIgnoreNeighbors(BlockPos const&);
	bool _isIceAt(BlockPos const&);
	void* getChunk(int, int);
	bool hasBlock(int, int, int);
	void isOwnerThread() const;
};

